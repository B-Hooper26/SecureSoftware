<?php
require_once __DIR__ . '/../config.php';
$config = require __DIR__ . '/../config.php';
$conn = new mysqli($config['DB_SERVER'], $config['DB_USERNAME'], $config['DB_PASSWORD'], $config['DB_NAME']);

$failures = [];

function print_result($name, $pass, $msg) {
    echo ($pass ? "PASS" : "FAIL") . ": $name - $msg\n";
}

// 1. Password Storage Vulnerability
$username = 'pwtest_' . time();
$password = 'plaintextpw123';
$conn->query("INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$username@example.com', '2000-01-01', '$password', '123', 'addr', 0)");
$result = $conn->query("SELECT password FROM users WHERE username = '$username'");
$row = $result->fetch_assoc();
$db_password = $row['password'];
if ($db_password === $password) {
    print_result('Password Storage', false, 'Passwords are stored in plain text (vulnerable).');
    $failures[] = 'Password Storage';
} else {
    print_result('Password Storage', true, 'Passwords are not stored in plain text.');
}
$conn->query("DELETE FROM users WHERE username = '$username'");

// 2. SQL Injection Vulnerability
$username = 'sqlinj_' . time();
$password = 'sqltestpw';
$conn->query("INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$username@example.com', '2000-01-01', '$password', '123', 'addr', 0)");
$sql = "SELECT id FROM users WHERE username = '' OR 1=1 -- ' OR email = '' OR 1=1 -- ' OR password = 'abc'";
$result = $conn->query($sql);
if ($result && $result->num_rows > 0) {
    print_result('SQL Injection', false, 'SQL injection possible (vulnerable).');
    $failures[] = 'SQL Injection';
} else {
    print_result('SQL Injection', true, 'SQL injection not possible (secure).');
}
$conn->query("DELETE FROM users WHERE username = '$username'");

// 3. Email Authenticity Vulnerability
$test_email = "notanemail";
$username = "emailvuln_" . time();
$sql = "INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$test_email', '2000-01-01', 'test', '123', 'addr', 0)";
if ($conn->query($sql)) {
    print_result('Email Authenticity', false, 'Invalid email accepted (vulnerable).');
    $failures[] = 'Email Authenticity';
    $conn->query("DELETE FROM users WHERE username = '$username'");
} else {
    print_result('Email Authenticity', true, 'Invalid email rejected.');
}

// 4. Password Complexity Vulnerability
$username = 'pwcomplex_' . time();
$simple_password = '123';
$conn->query("INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$username@example.com', '2000-01-01', '$simple_password', '123', 'addr', 0)");
$result = $conn->query("SELECT password FROM users WHERE username = '$username'");
$row = $result->fetch_assoc();
if ($row && $row['password'] === $simple_password) {
    print_result('Password Complexity', false, 'Weak password accepted (vulnerable).');
    $failures[] = 'Password Complexity';
} else {
    print_result('Password Complexity', true, 'Weak password rejected.');
}
$conn->query("DELETE FROM users WHERE username = '$username'");
// 5. Null Value Vulnerability
$username = 'nulltest_' . time();
$sql = "INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL)";
if ($conn->query($sql)) {
    print_result('Null Values', false, 'Null values accepted in required fields (vulnerable).');
    $failures[] = 'Null Values';
    $conn->query("DELETE FROM users WHERE username IS NULL");
} else {
    print_result('Null Values', true, 'Null values rejected in required fields.');
}

// 6. Phone Number Validation
$username = 'phonetest_' . time();
$invalid_phone = 'not-a-phone-number';
$sql = "INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$username@example.com', '2000-01-01', 'test123', '$invalid_phone', 'addr', 0)";
if ($conn->query($sql)) {
    print_result('Phone Validation', false, 'Invalid phone number format accepted (vulnerable).');
    $failures[] = 'Phone Validation';
    $conn->query("DELETE FROM users WHERE username = '$username'");
} else {
    print_result('Phone Validation', true, 'Invalid phone number format rejected.');
}

// 7. Future Date of Birth Validation
$username = 'dobtest_' . time();
$future_date = date('Y-m-d', strtotime('+1 year')); // Date one year in the future
$sql = "INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES ('$username', 'Test', '$username@example.com', '$future_date', 'test123', '1234567890', 'addr', 0)";
if ($conn->query($sql)) {
    print_result('DOB Validation', false, 'Future date of birth accepted (vulnerable).');
    $failures[] = 'DOB Validation';
    $conn->query("DELETE FROM users WHERE username = '$username'");
} else {
    print_result('DOB Validation', true, 'Future date of birth rejected.');
}
// Summary and exit code
if (count($failures) > 0) {
    echo "\nSummary: FAIL\n";
    echo "Vulnerabilities detected in: " . implode(', ', $failures) . "\n";
    exit(1);
} else {
    echo "\nSummary: PASS\nAll security checks passed.\n";
    exit(0);
}
