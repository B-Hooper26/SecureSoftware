name: Login System Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: securedatabase
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, pdo_mysql, zip, dom
        coverage: none

    - name: Create test files
      run: |
        mkdir -p tests
        
        # Create test configuration
        printf '%s\n' '<?php' \
          'return [' \
          '    "DB_SERVER" => "127.0.0.1",' \
          '    "DB_USERNAME" => "root",' \
          '    "DB_PASSWORD" => "root",' \
          '    "DB_NAME" => "securedatabase"' \
          '];' > tests/config.php

        # Create login test file
        printf '%s\n' '<?php' \
          'require_once __DIR__ . "/config.php";' \
          '' \
          'class LoginTest {' \
          '    private $conn;' \
          '    private $config;' \
          '' \
          '    public function __construct() {' \
          '        $this->config = require __DIR__ . "/config.php";' \
          '        $this->conn = new mysqli(' \
          '            $this->config["DB_SERVER"],' \
          '            $this->config["DB_USERNAME"],' \
          '            $this->config["DB_PASSWORD"],' \
          '            $this->config["DB_NAME"]' \
          '        );' \
          '        if ($this->conn->connect_error) {' \
          '            throw new Exception("Connection failed: " . $this->conn->connect_error);' \
          '        }' \
          '    }' \
          '' \
          '    public function testRegistration() {' \
          '        echo "Testing user registration...\n";' \
          '        $username = "testuser_" . time();' \
          '        $password = "Test123!@#";' \
          '        $email = "test_" . time() . "@example.com";' \
          '        ' \
          '        // Test valid registration' \
          '        $result = $this->registerUser($username, $password, $email);' \
          '        if (!$result) {' \
          '            throw new Exception("Valid registration failed");' \
          '        }' \
          '        ' \
          '        // Test duplicate username' \
          '        $result = $this->registerUser($username, $password, "another@email.com");' \
          '        if ($result) {' \
          '            throw new Exception("Duplicate username was accepted");' \
          '        }' \
          '        ' \
          '        // Test duplicate email' \
          '        $result = $this->registerUser("another_user", $password, $email);' \
          '        if ($result) {' \
          '            throw new Exception("Duplicate email was accepted");' \
          '        }' \
          '        ' \
          '        echo "✓ Registration tests passed\n";' \
          '        return true;' \
          '    }' \
          '' \
          '    public function testLogin() {' \
          '        echo "Testing login functionality...\n";' \
          '        $username = "testuser_" . time();' \
          '        $password = "Test123!@#";' \
          '        $email = "test_" . time() . "@example.com";' \
          '        ' \
          '        // Register a test user' \
          '        $this->registerUser($username, $password, $email);' \
          '        ' \
          '        // Test valid login' \
          '        $result = $this->loginUser($username, $password);' \
          '        if (!$result) {' \
          '            throw new Exception("Valid login failed");' \
          '        }' \
          '        ' \
          '        // Test invalid password' \
          '        $result = $this->loginUser($username, "WrongPassword123!");' \
          '        if ($result) {' \
          '            throw new Exception("Invalid password was accepted");' \
          '        }' \
          '        ' \
          '        // Test non-existent user' \
          '        $result = $this->loginUser("nonexistent", $password);' \
          '        if ($result) {' \
          '            throw new Exception("Non-existent user was accepted");' \
          '        }' \
          '        ' \
          '        echo "✓ Login tests passed\n";' \
          '        return true;' \
          '    }' \
          '' \
          '    private function registerUser($username, $password, $email) {' \
          '        $stmt = $this->conn->prepare("INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");' \
          '        $fullname = "Test User";' \
          '        $dob = "2000-01-01";' \
          '        $hashed_password = password_hash($password, PASSWORD_DEFAULT);' \
          '        $phone = "1234567890";' \
          '        $address = "123 Test St";' \
          '        $is_admin = 0;' \
          '        ' \
          '        $stmt->bind_param("sssssssi", $username, $fullname, $email, $dob, $hashed_password, $phone, $address, $is_admin);' \
          '        return $stmt->execute();' \
          '    }' \
          '' \
          '    private function loginUser($username, $password) {' \
          '        $stmt = $this->conn->prepare("SELECT password FROM users WHERE username = ?");' \
          '        $stmt->bind_param("s", $username);' \
          '        $stmt->execute();' \
          '        $result = $stmt->get_result();' \
          '        $user = $result->fetch_assoc();' \
          '        ' \
          '        if (!$user) {' \
          '            return false;' \
          '        }' \
          '        ' \
          '        return password_verify($password, $user["password"]);' \
          '    }' \
          '' \
          '    public function cleanup() {' \
          '        $stmt = $this->conn->prepare("DELETE FROM users WHERE username LIKE \"testuser_%\"");' \
          '        $stmt->execute();' \
          '    }' \
          '}' \
          '' \
          '// Run tests' \
          'try {' \
          '    $test = new LoginTest();' \
          '    $test->testRegistration();' \
          '    $test->testLogin();' \
          '    $test->cleanup();' \
          '    echo "\nAll tests completed successfully!\n";' \
          '    exit(0);' \
          '} catch (Exception $e) {' \
          '    echo "Test failed: " . $e->getMessage() . "\n";' \
          '    exit(1);' \
          '}' > tests/login_test.php

    - name: Create database schema
      run: |
        echo "Creating database schema..."
        mysql -h127.0.0.1 -uroot -proot << EOF
        CREATE DATABASE IF NOT EXISTS securedatabase;
        USE securedatabase;

        CREATE TABLE IF NOT EXISTS users (
            id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
            username VARCHAR(50) NOT NULL UNIQUE,
            fullname VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL UNIQUE,
            dob DATE NOT NULL,
            password VARCHAR(255) NOT NULL,
            phone VARCHAR(20) NOT NULL,
            address TEXT NOT NULL,
            is_admin TINYINT(1) NOT NULL DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        EOF

    - name: Run login system tests
      run: |
        cd tests
        php login_test.php 