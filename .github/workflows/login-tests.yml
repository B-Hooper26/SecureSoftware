name: Login System Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: securedatabase
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, intl, pdo_mysql, zip, dom
        coverage: none

    - name: Create test files
      run: |
        mkdir -p tests
        
        # Create test configuration
        printf '%s\n' '<?php' \
          'return [' \
          '    "DB_SERVER" => "127.0.0.1",' \
          '    "DB_USERNAME" => "root",' \
          '    "DB_PASSWORD" => "root",' \
          '    "DB_NAME" => "securedatabase"' \
          '];' > tests/config.php

        # Create login test file
        printf '%s\n' '<?php' \
          'require_once __DIR__ . "/config.php";' \
          '' \
          'class LoginTest {' \
          '    private $conn;' \
          '    private $config;' \
          '' \
          '    public function __construct() {' \
          '        $this->config = require __DIR__ . "/config.php";' \
          '        $this->conn = new mysqli(' \
          '            $this->config["DB_SERVER"],' \
          '            $this->config["DB_USERNAME"],' \
          '            $this->config["DB_PASSWORD"],' \
          '            $this->config["DB_NAME"]' \
          '        );' \
          '        if ($this->conn->connect_error) {' \
          '            throw new Exception("Connection failed: " . $this->conn->connect_error);' \
          '        }' \
          '    }' \
          '' \
          '    public function testInvalidPassword() {' \
          '        echo "Testing invalid password handling...\n";' \
          '        ' \
          '        // Test with empty password' \
          '        $username = "testuser_empty_" . time();' \
          '        $email = "test_empty_" . time() . "@example.com";' \
          '        try {' \
          '            $result = $this->registerUser($username, "", $email);' \
          '            if ($result) {' \
          '                throw new Exception("Empty password was accepted");' \
          '            }' \
          '        } catch (Exception $e) {' \
          '            if (strpos($e->getMessage(), "Password cannot be empty") === false) {' \
          '                throw $e;' \
          '            }' \
          '            echo "✓ Empty password test passed\n";' \
          '        }' \
          '        ' \
          '        // Test with too short password' \
          '        $username = "testuser_short_" . time();' \
          '        $email = "test_short_" . time() . "@example.com";' \
          '        try {' \
          '            $result = $this->registerUser($username, "short", $email);' \
          '            if ($result) {' \
          '                throw new Exception("Short password was accepted");' \
          '            }' \
          '        } catch (Exception $e) {' \
          '            if (strpos($e->getMessage(), "Password must be at least 8 characters long") === false) {' \
          '                throw $e;' \
          '            }' \
          '            echo "✓ Short password test passed\n";' \
          '        }' \
          '        ' \
          '        // Test with password containing only numbers' \
          '        $username = "testuser_numbers_" . time();' \
          '        $email = "test_numbers_" . time() . "@example.com";' \
          '        try {' \
          '            $result = $this->registerUser($username, "12345678", $email);' \
          '            if ($result) {' \
          '                throw new Exception("Numeric-only password was accepted");' \
          '            }' \
          '        } catch (Exception $e) {' \
          '            if (strpos($e->getMessage(), "Password must contain at least one uppercase letter") === false) {' \
          '                throw $e;' \
          '            }' \
          '            echo "✓ Numbers-only password test passed\n";' \
          '        }' \
          '        ' \
          '        // Test with password containing only letters' \
          '        $username = "testuser_letters_" . time();' \
          '        $email = "test_letters_" . time() . "@example.com";' \
          '        try {' \
          '            $result = $this->registerUser($username, "password", $email);' \
          '            if ($result) {' \
          '                throw new Exception("Letters-only password was accepted");' \
          '            }' \
          '        } catch (Exception $e) {' \
          '            if (strpos($e->getMessage(), "Password must contain at least one number") === false) {' \
          '                throw $e;' \
          '            }' \
          '            echo "✓ Letters-only password test passed\n";' \
          '        }' \
          '        ' \
          '        echo "✓ All password validation tests passed\n";' \
          '        return true;' \
          '    }' \
          '' \
          '    private function registerUser($username, $password, $email) {' \
          '        // Validate password' \
          '        if (empty($password)) {' \
          '            throw new Exception("Password cannot be empty");' \
          '        }' \
          '        ' \
          '        if (strlen($password) < 8) {' \
          '            throw new Exception("Password must be at least 8 characters long");' \
          '        }' \
          '        ' \
          '        if (!preg_match("/[A-Z]/", $password)) {' \
          '            throw new Exception("Password must contain at least one uppercase letter");' \
          '        }' \
          '        ' \
          '        if (!preg_match("/[a-z]/", $password)) {' \
          '            throw new Exception("Password must contain at least one lowercase letter");' \
          '        }' \
          '        ' \
          '        if (!preg_match("/[0-9]/", $password)) {' \
          '            throw new Exception("Password must contain at least one number");' \
          '        }' \
          '        ' \
          '        if (!preg_match("/[!@#$%^&*()\-_=+{};:,<.>]/", $password)) {' \
          '            throw new Exception("Password must contain at least one special character");' \
          '        }' \
          '        ' \
          '        $stmt = $this->conn->prepare("INSERT INTO users (username, fullname, email, dob, password, phone, address, is_admin) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");' \
          '        $fullname = "Test User";' \
          '        $dob = "2000-01-01";' \
          '        $hashed_password = password_hash($password, PASSWORD_DEFAULT);' \
          '        $phone = "1234567890";' \
          '        $address = "123 Test St";' \
          '        $is_admin = 0;' \
          '        ' \
          '        $stmt->bind_param("sssssssi", $username, $fullname, $email, $dob, $hashed_password, $phone, $address, $is_admin);' \
          '        return $stmt->execute();' \
          '    }' \
          '' \
          '    public function cleanup() {' \
          '        $stmt = $this->conn->prepare("DELETE FROM users WHERE username LIKE \"testuser_%\"");' \
          '        $stmt->execute();' \
          '    }' \
          '}' \
          '' \
          '// Run tests' \
          'try {' \
          '    $test = new LoginTest();' \
          '    $test->testInvalidPassword();' \
          '    $test->cleanup();' \
          '    echo "\nAll tests completed successfully!\n";' \
          '    exit(0);' \
          '} catch (Exception $e) {' \
          '    echo "Test failed: " . $e->getMessage() . "\n";' \
          '    exit(1);' \
          '}' > tests/login_test.php

    - name: Create database schema
      run: |
        echo "Creating database schema..."
        mysql -h127.0.0.1 -uroot -proot << EOF
        CREATE DATABASE IF NOT EXISTS securedatabase;
        USE securedatabase;

        CREATE TABLE IF NOT EXISTS users (
            id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,
            username VARCHAR(50) NOT NULL UNIQUE,
            fullname VARCHAR(100) NOT NULL,
            email VARCHAR(100) NOT NULL UNIQUE,
            dob DATE NOT NULL,
            password VARCHAR(255) NOT NULL,
            phone VARCHAR(20) NOT NULL,
            address TEXT NOT NULL,
            is_admin TINYINT(1) NOT NULL DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        );
        EOF

    - name: Run login system tests
      run: |
        cd tests
        php login_test.php 